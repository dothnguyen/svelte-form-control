{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/control.ts","../src/use-actions.ts","../src/validators.ts"],"sourcesContent":["import { ValidatorFn } from \"./validators\";\n\nexport const chainValidators: (validators: ValidatorFn[]) => ValidatorFn = validators => {\n\tif (!Array.isArray(validators)) return (value: any) => null;\n\treturn fieldValue => {\n\t\tfor (const validator of validators) {\n\t\t\tconst result = validator(fieldValue);\n\t\t\tif (result) return result;\n    }\n    return null;\n\t}\n}\n\nexport const validateIterated = <T>(validators: ValidatorFn<T>[], fieldValue: T) => {\n\tif (!Array.isArray(validators)) return null;\n\t\tfor (const validator of validators) {\n\t\t\tif (typeof validator === 'function') {\n        try {\n\t\t\t\t\tconst result = validator(fieldValue);\n\t\t\t\t\tif (result != null) return result;\n        } catch (e) {\n          console.error(`validator error`, validator, e);\n        }\n      }\n    }\n    return null;\n}\n","import { derived, get, Readable, writable, Writable } from 'svelte/store';\nimport { validateIterated } from './utils';\nimport { ValidatorFn } from './validators';\n\ntype GroupValue<T> = { [K in keyof T]: T[K] };\n\ntype ControlTypes = string | number | boolean;\n\nexport interface $ControlState {\n  $error: string | null;\n\n  $valid: boolean;\n\n  $touched: boolean;\n\n  $dirty: boolean;\n}\n\ntype ControlState<T = any> = T extends (infer K)[] ? Array<ControlState<K> & $ControlState>\n  : T extends ControlTypes ? $ControlState\n  : T extends GroupValue<T> ? { [K in keyof T]: ControlState<T[K]> & $ControlState }\n  : $ControlState;\n\nexport abstract class ControlBase<T = any> {\n\n  constructor(protected validators: ValidatorFn<T>[]) { }\n\n  abstract value: Writable<T>;\n\n  abstract state: Readable<ControlState<T>>;\n\n  abstract getControl(path: string): ControlBase;\n\n  abstract reset(value?: T): void;\n\n  abstract setTouched(touched: boolean): void;\n\n  setValidators(validators: ValidatorFn<T>[]) {\n    if (!(Array.isArray(validators) && validators.length)) return;\n    this.validators = validators;\n  }\n\n}\n\nexport class Control<T = ControlTypes> extends ControlBase<T> {\n\n  value = writable<T>(this.initial);\n\n  private touched = writable(false);\n\n  state = derived([this.value, this.touched], ([value, $touched]) => {\n    const $error = validateIterated(this.validators, value);\n    const $valid = $error == null;\n    const $dirty = this.initial !== value;\n    return { $error, $valid, $touched, $dirty } as ControlState<T>;\n  });\n\n  constructor(\n    private initial: T,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n  }\n\n  setTouched(touched: boolean) {\n    this.touched.set(touched);\n  }\n\n  getControl() {\n    return null!;\n  }\n\n  reset(value?: T) {\n    this.touched.set(false);\n    if (value != null) this.initial = value;\n    this.value.set(this.initial);\n  };\n\n}\n\ntype Controls<T> = { [K in keyof T]: ControlBase<T[K]> };\n\nconst objectPath = /^([^.[]+)\\.?(.*)$/;\n\nconst controlsValueReadable = <T>(controls: Controls<T>) => {\n  const keys = Object.keys(controls);\n  const controlList = keys.map(key => (<any>controls)[key]);\n  const readables = controlList.map(control => control.value) as any as [Readable<any>, ...Readable<any>[]];\n  return derived(readables, (values: any[]) =>\n    values.reduce((acc, value, index) => (acc[keys[index]] = value, acc), {}) as T);\n};\n\nconst controlsStateReadable = <T>(controls: Controls<T>) => {\n  const keys = Object.keys(controls);\n  const controlList = keys.map(key => (<any>controls)[key]);\n  const readables = controlList.map(control => control.state) as any as [Readable<any>, ...Readable<any>[]];\n  return derived(readables, (states: any[]) =>\n    states.reduce((acc, state, index) => (acc[keys[index]] = state, acc), {}) as { [K in keyof T]: $ControlState });\n};\n\nexport class ControlGroup<T> extends ControlBase<T> {\n\n  private valueReadable = controlsValueReadable(this.controls);\n\n  private childStateReadable = controlsStateReadable(this.controls);\n\n  value: Writable<T> = {\n    subscribe: this.valueReadable.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueReadable))),\n  };\n\n  state = derived([this.valueReadable, this.childStateReadable], ([value, childState]) => {\n    const children: Record<string, $ControlState> = {};\n    let childrenValid = true;\n    let $touched = false;\n    let $dirty = false;\n    for (const key of Object.keys(this.controls)) {\n      const state = children[key] = (childState as any)[key] as $ControlState;\n      childrenValid = childrenValid && state.$valid;\n      $touched = $touched || state.$touched;\n      $dirty = $dirty || state.$dirty;\n    }\n    const $error = validateIterated(this.validators, value);\n    const $valid = $error == null && childrenValid;\n    return { $error, $valid, $touched, $dirty, ...children } as ControlState<T>;\n  });\n\n  constructor(\n    private readonly controls: Controls<T>,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n  }\n\n  private setValue(value: T) {\n    Object.keys(this.controls).forEach(key => {\n      const control = (this.controls as any)[key] as ControlBase;\n      control.value.set((value as any)[key]);\n    });\n  }\n\n  setTouched(touched: boolean) {\n    Object.keys(this.controls).forEach(key => {\n      const control = (this.controls as any)[key] as ControlBase;\n      control.setTouched(touched);\n    });\n  }\n\n  getControl(path: string) {\n    const [_, name, rest] = path.match(objectPath) || [];\n    const control = name && (this.controls as any)[name] as ControlBase || null;\n    if (!control) return null!;\n    return rest ? control.getControl(rest) : control;\n  }\n\n  reset(value?: T) {\n    Object.keys(this.controls).forEach(key => {\n      const control = (this.controls as any)[key] as ControlBase;\n      control.reset((value as any)[key]);\n    });\n  };\n\n}\n\nconst arrayPath = /^\\[(\\d+)\\]\\.?(.*)$/;\n\nexport class ControlArray<T> extends ControlBase<T[]> {\n\n  private controlStore = writable(this._controls);\n\n  private valueDerived = derived(this.controlStore, (controls: ControlBase<T>[], set: (value: T[]) => void) => {\n    const derivedValues = derived(\n      controls.map(control => control.value) as any as [Readable<T>, ...Readable<T>[]],\n      values => values as T[]);\n    return derivedValues.subscribe(set);\n  });\n\n  private childStateDerived = derived(this.controlStore,\n    (controls: ControlBase<T>[], set: (value: $ControlState[]) => void) => {\n      const derivedValues = derived(\n        controls.map(control => control.state) as any as [Readable<$ControlState>, ...Readable<$ControlState>[]],\n        values => values as $ControlState[]);\n      return derivedValues.subscribe(set);\n    });\n\n  value: Writable<T[]> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived([this.valueDerived, this.childStateDerived], ([value, childState]) => {\n    const children: $ControlState & $ControlState[] = [] as any;\n    let childrenValid = true;\n    for (let i = 0, len = childState.length; i < len; i++) {\n      const state = childState[i];\n      children[i] = state;\n      childrenValid = childrenValid && state.$valid;\n      children.$touched = children.$touched || state.$touched;\n      children.$dirty = children.$dirty || state.$dirty;\n    }\n    children.$error = validateIterated(this.validators, value);\n    children.$valid = children.$error == null && childrenValid;\n\n    return children as any as ControlState<T[]>;\n  });\n\n  constructor(\n    private readonly _controls: ControlBase<T>[],\n    validators: ValidatorFn<T[]>[] = [],\n  ) {\n    super(validators);\n  }\n\n  private setValue(value: T[]) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach((control, index) => control.value.set(value[index]));\n  }\n\n  setTouched(touched: boolean) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach(control => control.setTouched(touched));\n  }\n\n  get size() {\n    return (get(this.controlStore) as ControlBase<T>[]).length;\n  }\n\n  get controls() {\n    return (get(this.controlStore) as ControlBase<T>[]);\n  }\n\n  pushControl(control: ControlBase<T>) {\n    this.controlStore.update(stores => (stores.push(control), stores));\n  }\n\n  addControlAt(index: number, control: ControlBase<T>) {\n    this.controlStore.update(stores => (stores.splice(index, 0, control), stores));\n  }\n\n  removeControlAt(index: number) {\n    this.controlStore.update(stores => (stores.splice(index, 1), stores));\n  }\n\n  slice(start?: number, end?: number) {\n    this.controlStore.update(stores => stores.slice(start, end));\n  }\n\n  getControl(path: string) {\n    const [_, index, rest] = path.match(arrayPath) || [];\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    const control = index != null && controls[+index] || null;\n    if (!control) return null!;\n    return rest ? control.getControl(rest) : control;\n  }\n\n  reset(value?: T[]) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach((control, index) => control.reset(value && value[index]));\n  }\n\n  setValidators(validators: ValidatorFn<T[]>[]) {\n    if (!(Array.isArray(validators) && validators.length)) return;\n    this.validators = validators;\n  }\n\n}\n","import { $ControlState, Control, ControlBase } from \"./control\";\n\nexport const controlClasses = (el: HTMLElement, control: Control) => {\n\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\tconst classList = el.classList;\n\n\tconst stateSub = control.state.subscribe((state) => {\n\t\tif (state.$error) {\n\t\t\tclassList.add('invalid');\n\t\t\tclassList.remove('valid');\n\t\t} else {\n\t\t\tclassList.add('valid');\n\t\t\tclassList.remove('invalid');\n\t\t}\n\n\t\tif (state.$dirty) {\n\t\t\tclassList.add('dirty');\n\t\t\tclassList.remove('pristine');\n\t\t} else {\n\t\t\tclassList.add('pristine');\n\t\t\tclassList.remove('dirty');\n\t\t}\n\n\t\tif (state.$touched) {\n\t\t\tclassList.add('touched');\n\t\t} else {\n\t\t\tclassList.remove('touched');\n\t\t}\n\n\t});\n\n\tconst eventNames = ['blur', 'focusout'];\n\n\tconst unregister = () => eventNames.forEach(eventName => el.removeEventListener(eventName, touchedFn));\n\n\tconst touchedFn = () => {\n\t\tcontrol.setTouched(true);\n\t\tunregister();\n\t}\n\n\teventNames.forEach(eventName => el.addEventListener(eventName, touchedFn));\n\n\treturn {\n\t\tdestroy() {\n\t\t\tunregister();\n\t\t\tstateSub();\n\t\t}\n\t}\n};\n\nexport const controlErrorFactory = ({ onlyTouched = false } = {}) =>\n\t(el: HTMLElement, control: ControlBase) => {\n\t\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\t\tconst stateSub = control.state.subscribe(_state => {\n\t\t\tconst state = (_state as $ControlState);\n\t\t\tconst hasError = !!((!onlyTouched || state.$touched) && state.$error);\n\t\t\tel.hidden = !hasError;\n\t\t\tif (hasError) el.innerHTML = state.$error!;\n\t\t});\n\n\t\treturn { destroy: stateSub };\n\t};\n\n\nexport const controlError = controlErrorFactory();\n","export type ValidatorFn<T = any> = (fieldValue: T) => string | null;\n\ntype ValidatorFactory<T = unknown> = (message: string, config?: T) => ValidatorFn;\n\nconst empty = (value: any) => value == null || `${value}` === '';\n\nexport const required: ValidatorFactory = (message, trim = true) => value => {\n\tlet stringValue = value != null ? `${value}` : '';\n\tif (trim) stringValue = stringValue.trim();\n\treturn stringValue !== '' ? null : message;\n};\n\nconst emailFormat = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const email: ValidatorFactory = message => email => {\n\tconst valid = empty(email) || emailFormat.test(email);\n\treturn valid ? null : message;\n};\n\nexport const minLength: ValidatorFactory<number> = (message, min) => value => {\n\tconst valid = empty(value) && (min == null || `${value}`.length >= min);\n\treturn valid ? null : message;\n};\n\nexport const maxLength: ValidatorFactory<number> = (message, max) => value => {\n\tconst valid = empty(value) && (max == null || `${value}`.length <= max);\n\treturn valid ? null : message;\n};\n\nexport const number: ValidatorFactory = message => number => {\n\tconst valid = empty(number) || !isNaN(number);\n\treturn valid ? null : message;\n};\n\nconst decimalFormat = /^[\\d.]+$/;\nexport const decimal: ValidatorFactory = message => number => {\n\tconst valid = empty(number) || !isNaN(number) && decimalFormat.test(`${number}`);\n\treturn valid ? null : message;\n};\n\nconst intFormat = /^[\\d]+$/;\nexport const integer: ValidatorFactory = message => number => {\n\tconst valid = empty(number) || !isNaN(number) && intFormat.test(`${number}`);\n\treturn valid ? null : message;\n};\n\n\n\nexport const min: ValidatorFactory<number> = (message, min) => number => {\n\tconst valid = empty(number) || !isNaN(number) && (min == null || number >= min);\n\treturn valid ? null : message;\n};\n\nexport const max: ValidatorFactory<number> = (message, max) => number => {\n\tconst valid = empty(number) || !isNaN(number) && (max == null || number <= max);\n\treturn valid ? null : message;\n};\n\nexport const pattern: ValidatorFactory<RegExp> = (message, re) => text => {\n\tconst valid = empty(text) || (re == null || re.test(text));\n\treturn valid ? null : message;\n};\n\n"],"names":["validateIterated","validators","fieldValue","Array","isArray","validator","result","e","console","error","ControlBase","[object Object]","this","length","Control","initial","super","writable","derived","value","touched","$touched","$error","$valid","$dirty","set","objectPath","arrayPath","controlErrorFactory","onlyTouched","el","control","Error","destroy","state","subscribe","_state","hasError","hidden","innerHTML","controlError","empty","emailFormat","decimalFormat","intFormat","_controls","controlStore","controls","map","values","valueDerived","setValue","update","updater","get","childStateDerived","childState","children","childrenValid","i","len","forEach","index","setTouched","size","stores","push","splice","start","end","slice","path","_","rest","match","getControl","reset","keys","Object","readables","key","reduce","acc","controlsValueReadable","states","controlsStateReadable","valueReadable","childStateReadable","name","classList","stateSub","add","remove","eventNames","unregister","eventName","removeEventListener","touchedFn","addEventListener","message","number","isNaN","test","email","max","min","re","text","trim","stringValue"],"mappings":"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"}