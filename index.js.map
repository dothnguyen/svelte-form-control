{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/control.ts","../src/use-actions.ts"],"sourcesContent":["import { ValidatorFn } from \"./validators\";\n\nexport const chainValidators: (validators: ValidatorFn[]) => ValidatorFn = validators => {\n\tif (!Array.isArray(validators)) return (value: any) => null;\n\treturn fieldValue => {\n\t\tfor (const validator of validators) {\n\t\t\tconst result = validator(fieldValue);\n\t\t\tif (result) return result;\n    }\n    return null;\n\t}\n}\n\nexport const validateIterated = <T>(validators: ValidatorFn<T>[], fieldValue: T) => {\n\tif (!Array.isArray(validators)) return null;\n\t\tfor (const validator of validators) {\n\t\t\tif (typeof validator === 'function') {\n        try {\n\t\t\t\t\tconst result = validator(fieldValue);\n\t\t\t\t\tif (result != null) return result;\n        } catch (e) {\n          console.error(`validator error`, validator, e);\n        }\n      }\n    }\n    return null;\n}\n","import { derived, get, Readable, writable, Writable } from 'svelte/store';\nimport { validateIterated } from './utils';\nimport { ValidationError, ValidatorFn } from './validators';\n\ntype GroupValue<T> = { [K in keyof T]: T[K] };\n\ntype ControlTypes = string | number | boolean;\n\nexport interface $ControlState {\n  $error: ValidationError | null;\n\n  $valid: boolean;\n\n  $touched: boolean;\n\n  $dirty: boolean;\n}\n\ntype ControlState<T = any> = T extends (infer K)[] ? $ControlState & { list: Array<ControlState<K>> } \n  : T extends ControlTypes ? $ControlState\n  : T extends GroupValue<T> ? { [K in keyof T]: ControlState<T[K]> & $ControlState }\n  : $ControlState;\n\nexport abstract class ControlBase<T = any> {\n\n  constructor(protected validators: ValidatorFn<T>[]) { }\n\n  abstract value: Writable<T>;\n\n  abstract state: Readable<ControlState<T>>;\n\n  abstract child(path: string): ControlBase;\n\n  abstract reset(value?: T): void;\n\n  abstract setTouched(touched: boolean): void;\n\n  setValidators(validators: ValidatorFn<T>[]) {\n    if (!(Array.isArray(validators) && validators.length)) return;\n    this.validators = validators;\n  }\n\n}\n\nexport class Control<T = ControlTypes> extends ControlBase<T> {\n\n  value = writable<T>(this.initial);\n\n  private touched = writable(false);\n\n  state = derived([this.value, this.touched], ([value, $touched]) => {\n    const $error = validateIterated(this.validators, value);\n    const $valid = $error == null;\n    const $dirty = this.initial !== value;\n    return { $error, $valid, $touched, $dirty } as ControlState<T>;\n  });\n\n  constructor(\n    private initial: T,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n  }\n\n  setTouched(touched: boolean) {\n    this.touched.set(touched);\n  }\n\n  child() {\n    return null!;\n  }\n\n  reset(value?: T) {\n    if (value !== undefined) this.initial = value;\n    this.value.set(this.initial);\n    this.touched.set(false);\n  };\n\n}\n\ntype Controls<T> = { [K in keyof T]: ControlBase<T[K]> };\ntype ControlsState<T> = { [K in keyof T]: $ControlState };\nconst objectPath = /^([^.[]+)\\.?(.*)$/;\n\nexport class ControlGroup<T> extends ControlBase<T> {\n\n  private controlStore = writable<Controls<T>>({} as any);\n\n  controls: Readable<Controls<T>> = { subscribe: this.controlStore.subscribe };\n\n  private valueDerived = derived(this.controlStore, (controls: Controls<T>, set: (value: T) => void) => {\n    const keys = Object.keys(controls) as Array<keyof T>;\n    const controlValues = keys.map(key => controls[key].value);\n    const derivedValues = derived(controlValues as any,\n      values => (<any[]>values).reduce((acc, value, index) => (acc[keys[index]] = value, acc), {}) as T);\n    return derivedValues.subscribe(set);\n  });\n\n  private childStateDerived = derived(this.controlStore,\n    (controls: Controls<T>, set: (value: ControlsState<T>) => void) => {\n      const keys = Object.keys(controls) as Array<keyof T>;\n      const controlStates = keys.map(key => controls[key].state);\n      const derivedStates = derived(controlStates as any,\n        states => (<any[]>states).reduce((acc, state, index) => (acc[keys[index]] = state, acc), {}) as ControlsState<T>);\n      return derivedStates.subscribe(set);\n    });\n\n  value: Writable<T> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived([this.valueDerived, this.childStateDerived], ([value, childState]) => {\n    const children: Record<string, $ControlState> = {};\n    let childrenValid = true;\n    let $touched = false;\n    let $dirty = false;\n    for (const key of Object.keys(childState)) {\n      const state = children[key] = (childState as any)[key] as $ControlState;\n      childrenValid = childrenValid && state.$valid;\n      $touched = $touched || state.$touched;\n      $dirty = $dirty || state.$dirty;\n    }\n    const $error = validateIterated(this.validators, value);\n    const $valid = $error == null && childrenValid;\n    return { $error, $valid, $touched, $dirty, ...children } as ControlState<T>;\n  });\n\n  constructor(\n    controls: Controls<T>,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n    this.controlStore.set(controls);\n  }\n\n  private iterateControls(callback: (args: [keyof T, ControlBase]) => void) {\n    const controls = get(this.controlStore);\n    (<[keyof T, ControlBase][]>Object.entries(controls)).forEach(callback);\n  }\n\n  private setValue(value: T) {\n    this.iterateControls(([key, control]) => {\n      control.value.set((value as any)[key]);\n    });\n  }\n\n  addControl(key: string, control: ControlBase) {\n    this.controlStore.update(controls => ((<any>controls)[key] = control, controls));\n  }\n\n  removeControl(key: string) {\n    this.controlStore.update(controls => (delete (<any>controls)[key], controls));\n  }\n\n  setTouched(touched: boolean) {\n    this.iterateControls(([_, control]) => {\n      control.setTouched(touched);\n    });\n  }\n\n  child(path: string) {\n    const [_, name, rest] = path.match(objectPath) || [];\n    const controls = get(this.controlStore);\n    const control = name && (controls as any)[name] as ControlBase || null;\n    if (!control) return null!;\n    return rest ? control.child(rest) : control;\n  }\n\n  reset(value?: T) {\n    this.iterateControls(([key, control]) => {\n      control.reset(value && (value as any)[key]);\n    });\n  };\n\n}\n\nconst arrayPath = /^\\[(\\d+)\\]\\.?(.*)$/;\n\nexport class ControlArray<T> extends ControlBase<T[]> {\n\n  private controlStore = writable(this._controls);\n\n  controls: Readable<ControlBase<T>[]> = { subscribe: this.controlStore.subscribe };\n\n  private valueDerived = derived(this.controlStore, (controls: ControlBase<T>[], set: (value: T[]) => void) => {\n    const derivedValues = derived(\n      controls.map(control => control.value) as any,\n      values => values as T[]);\n    return derivedValues.subscribe(set);\n  });\n\n  private childStateDerived = derived(this.controlStore,\n    (controls: ControlBase<T>[], set: (value: $ControlState[]) => void) => {\n      const derivedStates = derived(\n        controls.map(control => control.state) as any,\n        values => values as $ControlState[]);\n      return derivedStates.subscribe(set);\n    });\n\n  value: Writable<T[]> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived([this.valueDerived, this.childStateDerived], ([value, childState]) => {\n    const arrayState = { } as $ControlState & { list: $ControlState[] };\n    arrayState.list = [];\n    let childrenValid = true;\n    for (let i = 0, len = childState.length; i < len; i++) {\n      const state = childState[i];\n      arrayState.list[i] = state;\n      childrenValid = childrenValid && state.$valid;\n      arrayState.$touched = arrayState.$touched || state.$touched;\n      arrayState.$dirty = arrayState.$dirty || state.$dirty;\n    }\n    arrayState.$error = validateIterated(this.validators, value);\n    arrayState.$valid = arrayState.$error == null && childrenValid;\n\n    return arrayState as ControlState<T[]>;\n  });\n\n  constructor(\n    private readonly _controls: ControlBase<T>[],\n    validators: ValidatorFn<T[]>[] = [],\n  ) {\n    super(validators);\n  }\n\n  private iterateControls(callback: (control: ControlBase<T>, index: number) => void) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach(callback);\n  }\n\n  private setValue(value: T[]) {\n    this.iterateControls((control, index) => control.value.set(value[index]));\n  }\n\n  setTouched(touched: boolean) {\n    this.iterateControls(control => control.setTouched(touched));\n  }\n\n  pushControl(control: ControlBase<T>) {\n    this.controlStore.update(controls => (controls.push(control), controls));\n  }\n\n  addControlAt(index: number, control: ControlBase<T>) {\n    this.controlStore.update(controls => (controls.splice(index, 0, control), controls));\n  }\n\n  removeControlAt(index: number) {\n    this.controlStore.update(controls => (controls.splice(index, 1), controls));\n  }\n\n  removeControl(control: ControlBase<T>) {\n    this.controlStore.update(controls => controls.filter(c => c !== control));\n  }\n\n  slice(start?: number, end?: number) {\n    this.controlStore.update(controls => controls.slice(start, end));\n  }\n\n  child(path: string) {\n    const [_, index, rest] = path.match(arrayPath) || [];\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    const control = index != null && controls[+index] || null;\n    if (!control) return null!;\n    return rest ? control.child(rest) : control;\n  }\n\n  reset(value?: T[]) {\n    this.iterateControls((control, index) => control.reset(value && value[index]));\n  }\n\n}\n","import { get, Readable } from 'svelte/store';\nimport { $ControlState, Control, ControlBase } from \"./control\";\n\nexport const controlClasses = (el: HTMLElement, control: Control) => {\n\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\tconst classList = el.classList;\n\n\tconst stateSub = control.state.subscribe((state) => {\n\t\tif (state.$error) {\n\t\t\tclassList.add('invalid');\n\t\t\tclassList.remove('valid');\n\t\t} else {\n\t\t\tclassList.add('valid');\n\t\t\tclassList.remove('invalid');\n\t\t}\n\n\t\tif (state.$dirty) {\n\t\t\tclassList.add('dirty');\n\t\t\tclassList.remove('pristine');\n\t\t} else {\n\t\t\tclassList.add('pristine');\n\t\t\tclassList.remove('dirty');\n\t\t}\n\n\t\tif (state.$touched) {\n\t\t\tclassList.add('touched');\n\t\t} else {\n\t\t\tclassList.remove('touched');\n\t\t}\n\n\t});\n\n\tconst eventNames = ['blur', 'focusout'];\n\n\tconst unregister = () => eventNames.forEach(eventName => el.removeEventListener(eventName, touchedFn));\n\n\tconst touchedFn = () => {\n\t\tif ((<$ControlState>get(control.state)).$touched) return;\n\t\tcontrol.setTouched(true);\n\t}\n\n\teventNames.forEach(eventName => el.addEventListener(eventName, touchedFn));\n\n\treturn {\n\t\tdestroy() {\n\t\t\tunregister();\n\t\t\tstateSub();\n\t\t}\n\t}\n};\n"],"names":["validateIterated","validators","fieldValue","Array","isArray","validator","result","e","console","error","ControlBase","[object Object]","this","length","Control","initial","super","writable","derived","value","touched","$touched","$error","$valid","$dirty","set","undefined","objectPath","arrayPath","_controls","subscribe","controlStore","controls","map","control","values","state","valueDerived","setValue","update","updater","get","childStateDerived","childState","arrayState","list","childrenValid","i","len","callback","forEach","iterateControls","index","setTouched","push","splice","filter","c","start","end","slice","path","_","rest","match","child","reset","keys","Object","controlValues","key","reduce","acc","controlStates","states","children","entries","name","el","Error","classList","stateSub","add","remove","eventNames","touchedFn","eventName","addEventListener","removeEventListener"],"mappings":"kGAaO,MAAMA,EAAmB,CAAIC,EAA8BC,KACjE,IAAKC,MAAMC,QAAQH,GAAa,OAAO,KACtC,IAAK,MAAMI,KAAaJ,EACvB,GAAyB,mBAAdI,EACN,IACH,MAAMC,EAASD,EAAUH,GACzB,GAAc,MAAVI,EAAgB,OAAOA,EACtB,MAAOC,GACPC,QAAQC,MAAM,kBAAmBJ,EAAWE,GAIlD,OAAO,YCFWG,EAEpBC,YAAsBV,GAAAW,gBAAAX,EAYtBU,cAAcV,GACNE,MAAMC,QAAQH,IAAeA,EAAWY,SAC9CD,KAAKX,WAAaA,UAKTa,UAAkCJ,EAa7CC,YACUI,EACRd,EAA+B,IAE/Be,MAAMf,GAHEW,aAAAG,EAZVH,WAAQK,WAAYL,KAAKG,SAEjBH,aAAUK,YAAS,GAE3BL,WAAQM,UAAQ,CAACN,KAAKO,MAAOP,KAAKQ,SAAU,EAAED,EAAOE,MACnD,MAAMC,EAAStB,EAAiBY,KAAKX,WAAYkB,GAGjD,MAAO,CAAEG,OAAAA,EAAQC,OAFQ,MAAVD,EAEUD,SAAAA,EAAUG,OADpBZ,KAAKG,UAAYI,KAWlCR,WAAWS,GACTR,KAAKQ,QAAQK,IAAIL,GAGnBT,QACE,OAAO,KAGTA,MAAMQ,QACUO,IAAVP,IAAqBP,KAAKG,QAAUI,GACxCP,KAAKO,MAAMM,IAAIb,KAAKG,SACpBH,KAAKQ,QAAQK,KAAI,IAOrB,MAAME,EAAa,oBAgGnB,MAAMC,EAAY,0EAEmBlB,EA4CnCC,YACmBkB,EACjB5B,EAAiC,IAEjCe,MAAMf,GAHWW,eAAAiB,EA3CXjB,kBAAeK,WAASL,KAAKiB,WAErCjB,cAAuC,CAAEkB,UAAWlB,KAAKmB,aAAaD,WAE9DlB,kBAAeM,UAAQN,KAAKmB,aAAc,CAACC,EAA4BP,IACvDP,UACpBc,EAASC,IAAIC,GAAWA,EAAQf,OAChCgB,GAAUA,GACSL,UAAUL,IAGzBb,uBAAoBM,UAAQN,KAAKmB,aACvC,CAACC,EAA4BP,IACLP,UACpBc,EAASC,IAAIC,GAAWA,EAAQE,OAChCD,GAAUA,GACSL,UAAUL,IAGnCb,WAAuB,CACrBkB,UAAWlB,KAAKyB,aAAaP,UAC7BL,IAAKN,GAASP,KAAK0B,SAASnB,GAC5BoB,OAAQC,GAAW5B,KAAK0B,SAASE,EAAQC,MAAI7B,KAAKyB,iBAGpDzB,WAAQM,UAAQ,CAACN,KAAKyB,aAAczB,KAAK8B,mBAAoB,EAAEvB,EAAOwB,MACpE,MAAMC,EAAa,CACnBC,KAAkB,IAClB,IAAIC,GAAgB,EACpB,IAAK,IAAIC,EAAI,EAAGC,EAAML,EAAW9B,OAAQkC,EAAIC,EAAKD,IAAK,CACrD,MAAMX,EAAQO,EAAWI,GACzBH,EAAWC,KAAKE,GAAKX,EACrBU,EAAgBA,GAAiBV,EAAMb,OACvCqB,EAAWvB,SAAWuB,EAAWvB,UAAYe,EAAMf,SACnDuB,EAAWpB,OAASoB,EAAWpB,QAAUY,EAAMZ,OAKjD,OAHAoB,EAAWtB,OAAStB,EAAiBY,KAAKX,WAAYkB,GACtDyB,EAAWrB,OAA8B,MAArBqB,EAAWtB,QAAkBwB,EAE1CF,IAUDjC,gBAAgBsC,GACaR,MAAI7B,KAAKmB,cACnCmB,QAAQD,GAGXtC,SAASQ,GACfP,KAAKuC,gBAAgB,CAACjB,EAASkB,IAAUlB,EAAQf,MAAMM,IAAIN,EAAMiC,KAGnEzC,WAAWS,GACTR,KAAKuC,gBAAgBjB,GAAWA,EAAQmB,WAAWjC,IAGrDT,YAAYuB,GACVtB,KAAKmB,aAAaQ,OAAOP,IAAaA,EAASsB,KAAKpB,GAAUF,IAGhErB,aAAayC,EAAelB,GAC1BtB,KAAKmB,aAAaQ,OAAOP,IAAaA,EAASuB,OAAOH,EAAO,EAAGlB,GAAUF,IAG5ErB,gBAAgByC,GACdxC,KAAKmB,aAAaQ,OAAOP,IAAaA,EAASuB,OAAOH,EAAO,GAAIpB,IAGnErB,cAAcuB,GACZtB,KAAKmB,aAAaQ,OAAOP,GAAYA,EAASwB,OAAOC,GAAKA,IAAMvB,IAGlEvB,MAAM+C,EAAgBC,GACpB/C,KAAKmB,aAAaQ,OAAOP,GAAYA,EAAS4B,MAAMF,EAAOC,IAG7DhD,MAAMkD,GACJ,MAAOC,EAAGV,EAAOW,GAAQF,EAAKG,MAAMpC,IAAc,GAC5CI,EAA6BS,MAAI7B,KAAKmB,cACtCG,EAAmB,MAATkB,GAAiBpB,GAAUoB,IAAU,KACrD,OAAKlB,EACE6B,EAAO7B,EAAQ+B,MAAMF,GAAQ7B,EADf,KAIvBvB,MAAMQ,GACJP,KAAKuC,gBAAgB,CAACjB,EAASkB,IAAUlB,EAAQgC,MAAM/C,GAASA,EAAMiC,gEA7LrC1C,EA6CnCC,YACEqB,EACA/B,EAA+B,IAE/Be,MAAMf,GA/CAW,kBAAeK,WAAsB,IAE7CL,cAAkC,CAAEkB,UAAWlB,KAAKmB,aAAaD,WAEzDlB,kBAAeM,UAAQN,KAAKmB,aAAc,CAACC,EAAuBP,KACxE,MAAM0C,EAAOC,OAAOD,KAAKnC,GACnBqC,EAAgBF,EAAKlC,IAAIqC,GAAOtC,EAASsC,GAAKnD,OAGpD,OAFsBD,UAAQmD,EAC5BlC,GAAkBA,EAAQoC,OAAO,CAACC,EAAKrD,EAAOiC,KAAWoB,EAAIL,EAAKf,IAAUjC,EAAOqD,GAAM,KACtE1C,UAAUL,KAGzBb,uBAAoBM,UAAQN,KAAKmB,aACvC,CAACC,EAAuBP,KACtB,MAAM0C,EAAOC,OAAOD,KAAKnC,GACnByC,EAAgBN,EAAKlC,IAAIqC,GAAOtC,EAASsC,GAAKlC,OAGpD,OAFsBlB,UAAQuD,EAC5BC,GAAkBA,EAAQH,OAAO,CAACC,EAAKpC,EAAOgB,KAAWoB,EAAIL,EAAKf,IAAUhB,EAAOoC,GAAM,KACtE1C,UAAUL,KAGnCb,WAAqB,CACnBkB,UAAWlB,KAAKyB,aAAaP,UAC7BL,IAAKN,GAASP,KAAK0B,SAASnB,GAC5BoB,OAAQC,GAAW5B,KAAK0B,SAASE,EAAQC,MAAI7B,KAAKyB,iBAGpDzB,WAAQM,UAAQ,CAACN,KAAKyB,aAAczB,KAAK8B,mBAAoB,EAAEvB,EAAOwB,MACpE,MAAMgC,EAA0C,GAChD,IAAI7B,GAAgB,EAChBzB,GAAW,EACXG,GAAS,EACb,IAAK,MAAM8C,KAAOF,OAAOD,KAAKxB,GAAa,CACzC,MAAMP,EAAQuC,EAASL,GAAQ3B,EAAmB2B,GAClDxB,EAAgBA,GAAiBV,EAAMb,OACvCF,EAAWA,GAAYe,EAAMf,SAC7BG,EAASA,GAAUY,EAAMZ,OAE3B,MAAMF,EAAStB,EAAiBY,KAAKX,WAAYkB,GAC3CI,EAAmB,MAAVD,GAAkBwB,EACjC,OAAOsB,eAAE9C,OAAAA,EAAQC,OAAAA,EAAQF,SAAAA,EAAUG,OAAAA,GAAWmD,KAQ9C/D,KAAKmB,aAAaN,IAAIO,GAGhBrB,gBAAgBsC,GACtB,MAAMjB,EAAWS,MAAI7B,KAAKmB,cACCqC,OAAOQ,QAAQ5C,GAAWkB,QAAQD,GAGvDtC,SAASQ,GACfP,KAAKuC,gBAAgB,EAAEmB,EAAKpC,MAC1BA,EAAQf,MAAMM,IAAKN,EAAcmD,MAIrC3D,WAAW2D,EAAapC,GACtBtB,KAAKmB,aAAaQ,OAAOP,IAAmBA,EAAUsC,GAAOpC,EAASF,IAGxErB,cAAc2D,GACZ1D,KAAKmB,aAAaQ,OAAOP,WAA0BA,EAAUsC,GAAMtC,IAGrErB,WAAWS,GACTR,KAAKuC,gBAAgB,EAAEW,EAAG5B,MACxBA,EAAQmB,WAAWjC,KAIvBT,MAAMkD,GACJ,MAAOC,EAAGe,EAAMd,GAAQF,EAAKG,MAAMrC,IAAe,GAC5CK,EAAWS,MAAI7B,KAAKmB,cACpBG,EAAU2C,GAAS7C,EAAiB6C,IAAwB,KAClE,OAAK3C,EACE6B,EAAO7B,EAAQ+B,MAAMF,GAAQ7B,EADf,KAIvBvB,MAAMQ,GACJP,KAAKuC,gBAAgB,EAAEmB,EAAKpC,MAC1BA,EAAQgC,MAAM/C,GAAUA,EAAcmD,+BCzKd,CAACQ,EAAiB5C,KAC/C,KAAMA,aAAmBpB,GAAU,MAAM,IAAIiE,MAAM,qCAEnD,MAAMC,EAAYF,EAAGE,UAEfC,EAAW/C,EAAQE,MAAMN,UAAWM,IACrCA,EAAMd,QACT0D,EAAUE,IAAI,WACdF,EAAUG,OAAO,WAEjBH,EAAUE,IAAI,SACdF,EAAUG,OAAO,YAGd/C,EAAMZ,QACTwD,EAAUE,IAAI,SACdF,EAAUG,OAAO,cAEjBH,EAAUE,IAAI,YACdF,EAAUG,OAAO,UAGd/C,EAAMf,SACT2D,EAAUE,IAAI,WAEdF,EAAUG,OAAO,aAKbC,EAAa,CAAC,OAAQ,YAItBC,EAAY,KACG5C,MAAIP,EAAQE,OAAQf,UACxCa,EAAQmB,YAAW,IAKpB,OAFA+B,EAAWlC,QAAQoC,GAAaR,EAAGS,iBAAiBD,EAAWD,IAExD,CACN1E,UAVwByE,EAAWlC,QAAQoC,GAAaR,EAAGU,oBAAoBF,EAAWD,IAYzFJ"}