"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("svelte/store");const e=(t,e)=>{if(!Array.isArray(t))return null;for(const r of t)if("function"==typeof r)try{const t=r(e);if(null!=t)return t}catch(t){console.error("validator error",r,t)}return null};class r{constructor(t){this.validators=t}setValidators(t){Array.isArray(t)&&t.length&&(this.validators=t)}}class s extends r{constructor(r,s=[]){super(s),this.initial=r,this.value=t.writable(this.initial),this.touched=t.writable(!1),this.state=t.derived([this.value,this.touched],([t,r])=>{const s=e(this.validators,t);return{$error:s,$valid:null==s,$touched:r,$dirty:this.initial!==t}})}setTouched(t){this.touched.set(t)}child(){return null}reset(t){void 0!==t&&(this.initial=t),this.value.set(this.initial),this.touched.set(!1)}}const o=/^([^.[]+)\.?(.*)$/;const i=/^\[(\d+)\]\.?(.*)$/;exports.Control=s,exports.ControlArray=class extends r{constructor(r,s=[]){super(s),this._controls=r,this.controlStore=t.writable(this._controls),this.controls={subscribe:this.controlStore.subscribe},this.valueDerived=t.derived(this.controlStore,(e,r)=>t.derived(e.map(t=>t.value),t=>t).subscribe(r)),this.childStateDerived=t.derived(this.controlStore,(e,r)=>t.derived(e.map(t=>t.state),t=>t).subscribe(r)),this.value={subscribe:this.valueDerived.subscribe,set:t=>this.setValue(t),update:e=>this.setValue(e(t.get(this.valueDerived)))},this.state=t.derived([this.valueDerived,this.childStateDerived],([t,r])=>{const s={list:[]};let o=!0;for(let t=0,e=r.length;t<e;t++){const e=r[t];s.list[t]=e,o=o&&e.$valid,s.$touched=s.$touched||e.$touched,s.$dirty=s.$dirty||e.$dirty}return s.$error=e(this.validators,t),s.$valid=null==s.$error&&o,s})}iterateControls(e){t.get(this.controlStore).forEach(e)}setValue(t){this.iterateControls((e,r)=>e.value.set(t[r]))}setTouched(t){this.iterateControls(e=>e.setTouched(t))}pushControl(t){this.controlStore.update(e=>(e.push(t),e))}addControlAt(t,e){this.controlStore.update(r=>(r.splice(t,0,e),r))}removeControlAt(t){this.controlStore.update(e=>(e.splice(t,1),e))}removeControl(t){this.controlStore.update(e=>e.filter(e=>e!==t))}slice(t,e){this.controlStore.update(r=>r.slice(t,e))}child(e){const[r,s,o]=e.match(i)||[],l=t.get(this.controlStore),d=null!=s&&l[+s]||null;return d?o?d.child(o):d:null}reset(t){this.iterateControls((e,r)=>e.reset(t&&t[r]))}},exports.ControlBase=r,exports.ControlGroup=class extends r{constructor(r,s=[]){super(s),this.controlStore=t.writable({}),this.controls={subscribe:this.controlStore.subscribe},this.valueDerived=t.derived(this.controlStore,(e,r)=>{const s=Object.keys(e),o=s.map(t=>e[t].value);return t.derived(o,t=>t.reduce((t,e,r)=>(t[s[r]]=e,t),{})).subscribe(r)}),this.childStateDerived=t.derived(this.controlStore,(e,r)=>{const s=Object.keys(e),o=s.map(t=>e[t].state);return t.derived(o,t=>t.reduce((t,e,r)=>(t[s[r]]=e,t),{})).subscribe(r)}),this.value={subscribe:this.valueDerived.subscribe,set:t=>this.setValue(t),update:e=>this.setValue(e(t.get(this.valueDerived)))},this.state=t.derived([this.valueDerived,this.childStateDerived],([t,r])=>{const s={};let o=!0,i=!1,l=!1;for(const t of Object.keys(r)){const e=s[t]=r[t];o=o&&e.$valid,i=i||e.$touched,l=l||e.$dirty}const d=e(this.validators,t),c=null==d&&o;return Object.assign({$error:d,$valid:c,$touched:i,$dirty:l},s)}),this.controlStore.set(r)}iterateControls(e){const r=t.get(this.controlStore);Object.entries(r).forEach(e)}setValue(t){this.iterateControls(([e,r])=>{r.value.set(t[e])})}addControl(t,e){this.controlStore.update(r=>(r[t]=e,r))}removeControl(t){this.controlStore.update(e=>(delete e[t],e))}setTouched(t){this.iterateControls(([e,r])=>{r.setTouched(t)})}child(e){const[r,s,i]=e.match(o)||[],l=t.get(this.controlStore),d=s&&l[s]||null;return d?i?d.child(i):d:null}reset(t){this.iterateControls(([e,r])=>{r.reset(t&&t[e])})}},exports.controlClasses=(e,r)=>{if(!(r instanceof s))throw new Error("must be used with a Control class");const o=e.classList,i=r.state.subscribe(t=>{t.$error?(o.add("invalid"),o.remove("valid")):(o.add("valid"),o.remove("invalid")),t.$dirty?(o.add("dirty"),o.remove("pristine")):(o.add("pristine"),o.remove("dirty")),t.$touched?o.add("touched"):o.remove("touched")}),l=["blur","focusout"],d=()=>{t.get(r.state).$touched||r.setTouched(!0)};return l.forEach(t=>e.addEventListener(t,d)),{destroy(){l.forEach(t=>e.removeEventListener(t,d)),i()}}};
//# sourceMappingURL=index.js.map
