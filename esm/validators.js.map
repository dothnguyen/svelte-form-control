{"version":3,"file":"validators.js","sources":["../../src/validators.ts"],"sourcesContent":["export interface ValidationError<D = any> {\n\t[name: string]: D;\n}\n\nexport type ValidatorFn<T = any, D = any> = (fieldValue: T) => ValidationError<D> | null;\n\ntype ValidatorFactory<C = unknown, T = any, D = any> = (config: C) => ValidatorFn<T, D>;\n\nconst empty = (value: any) => value == null || `${value}` === '';\n\nexport const required: ValidatorFn<string | number | boolean, boolean> = value => {\n\tlet stringValue = value != null && value !== false ? `${value}`.trim() : '';\n\treturn stringValue !== '' ? null : { required: true };\n};\n\nconst emailFormat = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const email: ValidatorFn<string, boolean> = email => {\n\tconst valid = empty(email) || emailFormat.test(email);\n\treturn valid ? null : { email: true };\n};\n\nexport const minLength: ValidatorFactory<number, string, number> = min => value => {\n\tconst valid = empty(value) || min == null || `${value}`.trim().length >= min;\n\treturn valid ? null : { minLength: min };\n};\n\nexport const maxLength: ValidatorFactory<number, string, number> = max => value => {\n\tconst valid = empty(value) || max == null || `${value}`.trim().length <= max;\n\treturn valid ? null : { maxLength: max };\n};\n\nexport const number: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number);\n\treturn valid ? null : { number: true };\n};\n\nconst decimalFormat = /^\\d*\\.?\\d+$/;\nexport const decimal: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && decimalFormat.test(`${number}`);\n\treturn valid ? null : { decimal: true };\n};\n\nconst intFormat = /^\\d+$/;\nexport const integer: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && intFormat.test(`${number}`);\n\treturn valid ? null : { integer: true };\n};\n\n\nexport const min: ValidatorFactory<number, string | number, number> = min => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (min == null || number >= min);\n\treturn valid ? null : { min };\n};\n\nexport const max: ValidatorFactory<number, string | number, number> = max => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (max == null || number <= max);\n\treturn valid ? null : { max };\n};\n\nexport const pattern: ValidatorFactory<RegExp, string, string> = re => text => {\n\tconst valid = empty(text) || (re == null || re.test(text));\n\treturn valid ? null : { pattern: `${re}`};\n};\n"],"names":[],"mappings":"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"}