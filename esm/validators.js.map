{"version":3,"file":"validators.js","sources":["../../src/validators.ts"],"sourcesContent":["export interface ValidationError<D = any> {\n\t[name: string]: D;\n}\n\nexport type ValidatorFn<T = any, D = any> = (fieldValue: T) => ValidationError<D> | null;\n\ntype ValidatorFactory<C = unknown, T = any, D = any> = (config: C) => ValidatorFn<T, D>;\n\nconst empty = (value: any) => value == null || `${value}` === '';\n\nexport const required: ValidatorFn<string | number | boolean, boolean> = value => {\n\tlet stringValue = value != null && value !== false ? `${value}`.trim() : '';\n\treturn stringValue !== '' ? null : { required: true };\n};\n\nconst emailFormat = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const email: ValidatorFn<string, boolean> = email => {\n\tconst valid = empty(email) || emailFormat.test(email);\n\treturn valid ? null : { email: true };\n};\n\nexport const minLength: ValidatorFactory<number, string, number> = min => value => {\n\tconst valid = empty(value) || min == null || `${value}`.trim().length >= min;\n\treturn valid ? null : { minLength: min };\n};\n\nexport const maxLength: ValidatorFactory<number, string, number> = max => value => {\n\tconst valid = empty(value) || max == null || `${value}`.trim().length <= max;\n\treturn valid ? null : { maxLength: max };\n};\n\nexport const number: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number);\n\treturn valid ? null : { number: true };\n};\n\nconst decimalFormat = /^\\d*\\.?\\d+$/;\nexport const decimal: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && decimalFormat.test(`${number}`);\n\treturn valid ? null : { decimal: true };\n};\n\nconst intFormat = /^\\d+$/;\nexport const integer: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && intFormat.test(`${number}`);\n\treturn valid ? null : { integer: true };\n};\n\n\nexport const min: ValidatorFactory<number, string | number, number> = min => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (min == null || number >= min);\n\treturn valid ? null : { min };\n};\n\nexport const max: ValidatorFactory<number, string | number, number> = max => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (max == null || number <= max);\n\treturn valid ? null : { max };\n};\n\nexport const pattern: ValidatorFactory<RegExp, string, string> = re => text => {\n\tconst valid = empty(text) || (re == null || re.test(text));\n\treturn valid ? null : { pattern: `${re}`};\n};\n"],"names":["empty","value","required","trim","emailFormat","email","test","minLength","min","length","maxLength","max","number","isNaN","decimalFormat","decimal","intFormat","integer","pattern","re","text"],"mappings":"AAQA,MAAMA,EAASC,GAAwB,MAATA,GAAiB,GAAGA,GAAY,GAEjDC,EAA4DD,GAEjD,MADI,MAATA,IAA2B,IAAVA,GAAkB,GAAGA,GAAQE,OAAS,IAC7C,KAAO,CAAED,UAAU,GAG1CE,EAAc,6DACPC,EAAsCA,GACpCL,EAAMK,IAAUD,EAAYE,KAAKD,GAChC,KAAO,CAAEA,OAAO,GAGnBE,EAAsDC,GAAOP,GAC3DD,EAAMC,IAAiB,MAAPO,IAAe,GAAGP,GAAQE,OAAOM,QAAUD,EAC1D,KAAO,CAAED,UAAWC,GAGvBE,EAAsDC,GAAOV,GAC3DD,EAAMC,IAAiB,MAAPU,IAAe,GAAGV,GAAQE,OAAOM,QAAUE,EAC1D,KAAO,CAAED,UAAWC,GAGvBC,EAAgDA,GAC9CZ,EAAMY,KAAYC,OAAOD,GACxB,KAAO,CAAEA,QAAQ,GAG3BE,EAAgB,cACTC,EAAiDH,GAC/CZ,EAAMY,KAAYC,OAAOD,IAAWE,EAAcR,KAAK,GAAGM,GACzD,KAAO,CAAEG,SAAS,GAG5BC,EAAY,QACLC,EAAiDL,GAC/CZ,EAAMY,KAAYC,OAAOD,IAAWI,EAAUV,KAAK,GAAGM,GACrD,KAAO,CAAEK,SAAS,GAIrBT,EAAyDA,GAAOI,GAC9DZ,EAAMY,KAAYC,OAAOD,KAAmB,MAAPJ,GAAeI,GAAUJ,GAC7D,KAAO,CAAEA,IAAAA,GAGZG,EAAyDA,GAAOC,GAC9DZ,EAAMY,KAAYC,OAAOD,KAAmB,MAAPD,GAAeC,GAAUD,GAC7D,KAAO,CAAEA,IAAAA,GAGZO,EAAoDC,GAAMC,GACxDpB,EAAMoB,IAAgB,MAAND,GAAcA,EAAGb,KAAKc,GACrC,KAAO,CAAEF,QAAS,GAAGC"}