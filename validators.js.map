{"version":3,"file":"validators.js","sources":["../src/validators.ts"],"sourcesContent":["export interface ValidationError<D = any> {\n\t[name: string]: D;\n}\n\nexport type ValidatorFn<T = any, D = any> = (fieldValue: T) => ValidationError<D> | null;\n\ntype ValidatorFactory<C = unknown, T = any, D = any> = (config: C) => ValidatorFn<T, D>;\n\nconst empty = (value: any) => value == null || `${value}` === '';\n\nexport const required: ValidatorFn<string | number | boolean, boolean> = value => {\n\tlet stringValue = value != null && value !== false ? `${value}`.trim() : '';\n\treturn stringValue !== '' ? null : { required: true };\n};\n\nconst emailFormat = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const email: ValidatorFn<string, boolean> = email => {\n\tconst valid = empty(email) || emailFormat.test(email);\n\treturn valid ? null : { email: true };\n};\n\nexport const minLength: ValidatorFactory<number, string, number> = min => value => {\n\tconst valid = empty(value) || min == null || `${value}`.trim().length >= min;\n\treturn valid ? null : { minLength: min };\n};\n\nexport const maxLength: ValidatorFactory<number, string, number> = max => value => {\n\tconst valid = empty(value) || max == null || `${value}`.trim().length <= max;\n\treturn valid ? null : { maxLength: max };\n};\n\nexport const number: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number);\n\treturn valid ? null : { number: true };\n};\n\nconst decimalFormat = /^\\d*\\.?\\d+$/;\nexport const decimal: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && decimalFormat.test(`${number}`);\n\treturn valid ? null : { decimal: true };\n};\n\nconst intFormat = /^\\d+$/;\nexport const integer: ValidatorFn<string | number, boolean> = number => {\n\tconst valid = empty(number) || !isNaN(+number) && intFormat.test(`${number}`);\n\treturn valid ? null : { integer: true };\n};\n\n\nexport const min: ValidatorFactory<number, string | number, number> = min => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (min == null || number >= min);\n\treturn valid ? null : { min };\n};\n\nexport const max: ValidatorFactory<number, string | number, number> = max => number => {\n\tconst valid = empty(number) || !isNaN(+number) && (max == null || number <= max);\n\treturn valid ? null : { max };\n};\n\nexport const pattern: ValidatorFactory<RegExp, string, string> = re => text => {\n\tconst valid = empty(text) || (re == null || re.test(text));\n\treturn valid ? null : { pattern: `${re}`};\n};\n"],"names":["empty","value","emailFormat","decimalFormat","intFormat","number","isNaN","test","decimal","email","integer","max","trim","length","maxLength","min","minLength","re","text","pattern","required"],"mappings":"oEAQA,MAAMA,EAASC,GAAwB,MAATA,GAAiB,GAAGA,GAAY,GAOxDC,EAAc,6DAqBdC,EAAgB,cAMhBC,EAAY,wBAL4CC,GAC/CL,EAAMK,KAAYC,OAAOD,IAAWF,EAAcI,KAAK,GAAGF,GACzD,KAAO,CAAEG,SAAS,iBAvBiBC,GACpCT,EAAMS,IAAUP,EAAYK,KAAKE,GAChC,KAAO,CAAEA,OAAO,mBAyB8BJ,GAC/CL,EAAMK,KAAYC,OAAOD,IAAWD,EAAUG,KAAK,GAAGF,GACrD,KAAO,CAAEK,SAAS,eASoCC,GAAON,GAC9DL,EAAMK,KAAYC,OAAOD,KAAmB,MAAPM,GAAeN,GAAUM,GAC7D,KAAO,CAAEA,IAAAA,qBA9B0CA,GAAOV,GAC3DD,EAAMC,IAAiB,MAAPU,IAAe,GAAGV,GAAQW,OAAOC,QAAUF,EAC1D,KAAO,CAAEG,UAAWH,eAqBkCI,GAAOV,GAC9DL,EAAMK,KAAYC,OAAOD,KAAmB,MAAPU,GAAeV,GAAUU,GAC7D,KAAO,CAAEA,IAAAA,qBA9B0CA,GAAOd,GAC3DD,EAAMC,IAAiB,MAAPc,IAAe,GAAGd,GAAQW,OAAOC,QAAUE,EAC1D,KAAO,CAAEC,UAAWD,kBAQyBV,GAC9CL,EAAMK,KAAYC,OAAOD,GACxB,KAAO,CAAEA,QAAQ,mBA0BgCY,GAAMC,GACxDlB,EAAMkB,IAAgB,MAAND,GAAcA,EAAGV,KAAKW,GACrC,KAAO,CAAEC,QAAS,GAAGF,oBAnDoChB,GAEjD,MADI,MAATA,IAA2B,IAAVA,GAAkB,GAAGA,GAAQW,OAAS,IAC7C,KAAO,CAAEQ,UAAU"}