{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/control.ts","../../src/use-actions.ts"],"sourcesContent":["import { ValidatorFn } from \"./validators\";\n\nexport const chainValidators: (validators: ValidatorFn[]) => ValidatorFn = validators => {\n\tif (!Array.isArray(validators)) return (value: any) => null;\n\treturn fieldValue => {\n\t\tfor (const validator of validators) {\n\t\t\tconst result = validator(fieldValue);\n\t\t\tif (result) return result;\n    }\n    return null;\n\t}\n}\n\nexport const validateIterated = <T>(validators: ValidatorFn<T>[], fieldValue: T) => {\n\tif (!Array.isArray(validators)) return null;\n\t\tfor (const validator of validators) {\n\t\t\tif (typeof validator === 'function') {\n        try {\n\t\t\t\t\tconst result = validator(fieldValue);\n\t\t\t\t\tif (result != null) return result;\n        } catch (e) {\n          console.error(`validator error`, validator, e);\n        }\n      }\n    }\n    return null;\n}\n","import { derived, get, Readable, writable, Writable } from 'svelte/store';\nimport { validateIterated } from './utils';\nimport { ValidationError, ValidatorFn } from './validators';\n\ntype GroupValue<T> = { [K in keyof T]: T[K] };\n\ntype ControlTypes = string | number | boolean;\n\nexport interface $ControlState {\n  $error: ValidationError | null;\n\n  $valid: boolean;\n\n  $touched: boolean;\n\n  $dirty: boolean;\n}\n\ntype ControlState<T = any> = T extends (infer K)[] ? $ControlState & { list: Array<ControlState<K>> } \n  : T extends ControlTypes ? $ControlState\n  : T extends GroupValue<T> ? { [K in keyof T]: ControlState<T[K]> & $ControlState }\n  : $ControlState;\n\nexport abstract class ControlBase<T = any> {\n\n  constructor(protected validators: ValidatorFn<T>[]) { }\n\n  abstract value: Writable<T>;\n\n  abstract state: Readable<ControlState<T>>;\n\n  abstract child(path: string): ControlBase;\n\n  abstract reset(value?: T): void;\n\n  abstract setTouched(touched: boolean): void;\n\n  setValidators(validators: ValidatorFn<T>[]) {\n    if (!(Array.isArray(validators) && validators.length)) return;\n    this.validators = validators;\n  }\n\n}\n\nexport class Control<T = ControlTypes> extends ControlBase<T> {\n\n  value = writable<T>(this.initial);\n\n  private touched = writable(false);\n\n  state = derived([this.value, this.touched], ([value, $touched]) => {\n    const $error = validateIterated(this.validators, value);\n    const $valid = $error == null;\n    const $dirty = this.initial !== value;\n    return { $error, $valid, $touched, $dirty } as ControlState<T>;\n  });\n\n  constructor(\n    private initial: T,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n  }\n\n  setTouched(touched: boolean) {\n    this.touched.set(touched);\n  }\n\n  child() {\n    return null!;\n  }\n\n  reset(value?: T) {\n    if (value !== undefined) this.initial = value;\n    this.value.set(this.initial);\n    this.touched.set(false);\n  };\n\n}\n\ntype Controls<T> = { [K in keyof T]: ControlBase<T[K]> };\ntype ControlsState<T> = { [K in keyof T]: $ControlState };\nconst objectPath = /^([^.[]+)\\.?(.*)$/;\n\nexport class ControlGroup<T> extends ControlBase<T> {\n\n  private controlStore = writable<Controls<T>>({} as any);\n\n  controls: Readable<Controls<T>> = { subscribe: this.controlStore.subscribe };\n\n  private valueDerived = derived(this.controlStore, (controls: Controls<T>, set: (value: T) => void) => {\n    const keys = Object.keys(controls) as Array<keyof T>;\n    const controlValues = keys.map(key => controls[key].value);\n    const derivedValues = derived(controlValues as any,\n      values => (<any[]>values).reduce((acc, value, index) => (acc[keys[index]] = value, acc), {}) as T);\n    return derivedValues.subscribe(set);\n  });\n\n  private childStateDerived = derived(this.controlStore,\n    (controls: Controls<T>, set: (value: ControlsState<T>) => void) => {\n      const keys = Object.keys(controls) as Array<keyof T>;\n      const controlStates = keys.map(key => controls[key].state);\n      const derivedStates = derived(controlStates as any,\n        states => (<any[]>states).reduce((acc, state, index) => (acc[keys[index]] = state, acc), {}) as ControlsState<T>);\n      return derivedStates.subscribe(set);\n    });\n\n  value: Writable<T> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived([this.valueDerived, this.childStateDerived], ([value, childState]) => {\n    const children: Record<string, $ControlState> = {};\n    let childrenValid = true;\n    let $touched = false;\n    let $dirty = false;\n    for (const key of Object.keys(childState)) {\n      const state = children[key] = (childState as any)[key] as $ControlState;\n      childrenValid = childrenValid && state.$valid;\n      $touched = $touched || state.$touched;\n      $dirty = $dirty || state.$dirty;\n    }\n    const $error = validateIterated(this.validators, value);\n    const $valid = $error == null && childrenValid;\n    return { $error, $valid, $touched, $dirty, ...children } as ControlState<T>;\n  });\n\n  constructor(\n    controls: Controls<T>,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n    this.controlStore.set(controls);\n  }\n\n  private iterateControls(callback: (args: [keyof T, ControlBase]) => void) {\n    const controls = get(this.controlStore);\n    (<[keyof T, ControlBase][]>Object.entries(controls)).forEach(callback);\n  }\n\n  private setValue(value: T) {\n    this.iterateControls(([key, control]) => {\n      control.value.set((value as any)[key]);\n    });\n  }\n\n  addControl(key: string, control: ControlBase) {\n    this.controlStore.update(controls => ((<any>controls)[key] = control, controls));\n  }\n\n  removeControl(key: string) {\n    this.controlStore.update(controls => (delete (<any>controls)[key], controls));\n  }\n\n  setTouched(touched: boolean) {\n    this.iterateControls(([_, control]) => {\n      control.setTouched(touched);\n    });\n  }\n\n  child(path: string) {\n    const [_, name, rest] = path.match(objectPath) || [];\n    const controls = get(this.controlStore);\n    const control = name && (controls as any)[name] as ControlBase || null;\n    if (!control) return null!;\n    return rest ? control.child(rest) : control;\n  }\n\n  reset(value?: T) {\n    this.iterateControls(([key, control]) => {\n      control.reset(value && (value as any)[key]);\n    });\n  };\n\n}\n\nconst arrayPath = /^\\[(\\d+)\\]\\.?(.*)$/;\n\nexport class ControlArray<T> extends ControlBase<T[]> {\n\n  private controlStore = writable(this._controls);\n\n  controls: Readable<ControlBase<T>[]> = { subscribe: this.controlStore.subscribe };\n\n  private valueDerived = derived(this.controlStore, (controls: ControlBase<T>[], set: (value: T[]) => void) => {\n    const derivedValues = derived(\n      controls.map(control => control.value) as any,\n      values => values as T[]);\n    return derivedValues.subscribe(set);\n  });\n\n  private childStateDerived = derived(this.controlStore,\n    (controls: ControlBase<T>[], set: (value: $ControlState[]) => void) => {\n      const derivedStates = derived(\n        controls.map(control => control.state) as any,\n        values => values as $ControlState[]);\n      return derivedStates.subscribe(set);\n    });\n\n  value: Writable<T[]> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived([this.valueDerived, this.childStateDerived], ([value, childState]) => {\n    const arrayState = { } as $ControlState & { list: $ControlState[] };\n    arrayState.list = [];\n    let childrenValid = true;\n    for (let i = 0, len = childState.length; i < len; i++) {\n      const state = childState[i];\n      arrayState.list[i] = state;\n      childrenValid = childrenValid && state.$valid;\n      arrayState.$touched = arrayState.$touched || state.$touched;\n      arrayState.$dirty = arrayState.$dirty || state.$dirty;\n    }\n    arrayState.$error = validateIterated(this.validators, value);\n    arrayState.$valid = arrayState.$error == null && childrenValid;\n\n    return arrayState as ControlState<T[]>;\n  });\n\n  constructor(\n    private readonly _controls: ControlBase<T>[],\n    validators: ValidatorFn<T[]>[] = [],\n  ) {\n    super(validators);\n  }\n\n  private iterateControls(callback: (control: ControlBase<T>, index: number) => void) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach(callback);\n  }\n\n  private setValue(value: T[]) {\n    this.iterateControls((control, index) => control.value.set(value[index]));\n  }\n\n  setTouched(touched: boolean) {\n    this.iterateControls(control => control.setTouched(touched));\n  }\n\n  pushControl(control: ControlBase<T>) {\n    this.controlStore.update(controls => (controls.push(control), controls));\n  }\n\n  addControlAt(index: number, control: ControlBase<T>) {\n    this.controlStore.update(controls => (controls.splice(index, 0, control), controls));\n  }\n\n  removeControlAt(index: number) {\n    this.controlStore.update(controls => (controls.splice(index, 1), controls));\n  }\n\n  removeControl(control: ControlBase<T>) {\n    this.controlStore.update(controls => controls.filter(c => c !== control));\n  }\n\n  slice(start?: number, end?: number) {\n    this.controlStore.update(controls => controls.slice(start, end));\n  }\n\n  child(path: string) {\n    const [_, index, rest] = path.match(arrayPath) || [];\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    const control = index != null && controls[+index] || null;\n    if (!control) return null!;\n    return rest ? control.child(rest) : control;\n  }\n\n  reset(value?: T[]) {\n    this.iterateControls((control, index) => control.reset(value && value[index]));\n  }\n\n}\n","import { get, Readable } from 'svelte/store';\nimport { $ControlState, Control, ControlBase } from \"./control\";\n\nexport const controlClasses = (el: HTMLElement, control: Control) => {\n\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\tconst classList = el.classList;\n\n\tconst stateSub = control.state.subscribe((state) => {\n\t\tif (state.$error) {\n\t\t\tclassList.add('invalid');\n\t\t\tclassList.remove('valid');\n\t\t} else {\n\t\t\tclassList.add('valid');\n\t\t\tclassList.remove('invalid');\n\t\t}\n\n\t\tif (state.$dirty) {\n\t\t\tclassList.add('dirty');\n\t\t\tclassList.remove('pristine');\n\t\t} else {\n\t\t\tclassList.add('pristine');\n\t\t\tclassList.remove('dirty');\n\t\t}\n\n\t\tif (state.$touched) {\n\t\t\tclassList.add('touched');\n\t\t} else {\n\t\t\tclassList.remove('touched');\n\t\t}\n\n\t});\n\n\tconst eventNames = ['blur', 'focusout'];\n\n\tconst unregister = () => eventNames.forEach(eventName => el.removeEventListener(eventName, touchedFn));\n\n\tconst touchedFn = () => {\n\t\tif ((<$ControlState>get(control.state)).$touched) return;\n\t\tcontrol.setTouched(true);\n\t}\n\n\teventNames.forEach(eventName => el.addEventListener(eventName, touchedFn));\n\n\treturn {\n\t\tdestroy() {\n\t\t\tunregister();\n\t\t\tstateSub();\n\t\t}\n\t}\n};\n"],"names":["writable","derived","get"],"mappings":"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"}