{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/control.ts","../src/use-actions.ts","../src/validators.ts"],"sourcesContent":["import { ValidatorFn } from \"./validators\";\n\nexport const chainValidators: (validators: ValidatorFn[]) => ValidatorFn = validators => {\n\tif (!Array.isArray(validators)) return (value: any) => null;\n\treturn fieldValue => {\n\t\tfor (const validator of validators) {\n\t\t\tconst result = validator(fieldValue);\n\t\t\tif (result) return result;\n    }\n    return null;\n\t}\n}\n\nexport const validateIterated = <T>(validators: ValidatorFn<T>[], fieldValue: T) => {\n\tif (!Array.isArray(validators)) return null;\n\t\tfor (const validator of validators) {\n\t\t\tif (typeof validator === 'function') {\n        try {\n\t\t\t\t\tconst result = validator(fieldValue);\n\t\t\t\t\tif (result != null) return result;\n        } catch (e) {\n          console.error(`validator error`, validator, e);\n        }\n      }\n    }\n    return null;\n}\n","import { derived, get, Readable, writable, Writable } from 'svelte/store';\nimport { validateIterated } from './utils';\nimport { ValidatorFn } from './validators';\n\ntype GroupValue<T> = { [K in keyof T]: T[K] };\n\ntype ControlTypes = string | number | boolean;\n\nexport interface $ControlState {\n  $error: string | null;\n\n  $valid: boolean;\n\n  $touched: boolean;\n\n  $dirty: boolean;\n}\n\ntype ControlState<T = any> = T extends (infer K)[] ? Array<ControlState<K> & $ControlState>\n  : T extends ControlTypes ? $ControlState\n  : T extends GroupValue<T> ? { [K in keyof T]: ControlState<T[K]> & $ControlState }\n  : $ControlState;\n\nexport abstract class ControlBase<T = any> {\n\n  constructor(protected validators: ValidatorFn<T>[]) { }\n\n  abstract value: Writable<T>;\n\n  abstract state: Readable<ControlState<T>>;\n\n  abstract getControl(path: string): ControlBase;\n\n  abstract reset(value?: T): void;\n\n  abstract setTouched(touched: boolean): void;\n\n  setValidators(validators: ValidatorFn<T>[]) {\n    if (!(Array.isArray(validators) && validators.length)) return;\n    this.validators = validators;\n  }\n\n}\n\nexport class Control<T = ControlTypes> extends ControlBase<T> {\n\n  value = writable<T>(this.initial);\n\n  private touched = writable(false);\n\n  state = derived([this.value, this.touched], ([value, $touched]) => {\n    const $error = validateIterated(this.validators, value);\n    const $valid = $error == null;\n    const $dirty = this.initial !== value;\n    return { $error, $valid, $touched, $dirty } as ControlState<T>;\n  });\n\n  constructor(\n    private initial: T,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n  }\n\n  setTouched(touched: boolean) {\n    this.touched.set(touched);\n  }\n\n  getControl() {\n    return null!;\n  }\n\n  reset(value?: T) {\n    this.touched.set(false);\n    if (value != null) this.initial = value;\n    this.value.set(this.initial);\n  };\n\n}\n\ntype Controls<T> = { [K in keyof T]: ControlBase<T[K]> };\n\nconst objectPath = /^([^.[]+)\\.?(.*)$/;\n\nexport class ControlGroup<T> extends ControlBase<T> {\n\n  private valueDerived = derived(this.initControls(this.controls), value => value);\n\n  value: Writable<T> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived(this.value, value => {\n    const children: Record<string, $ControlState> = {};\n    let childrenValid = true;\n    let $touched = false;\n    let $dirty = false;\n    for (const key of Object.keys(this.controls)) {\n      const state = children[key] = get(((this.controls as any)[key] as ControlBase).state) as $ControlState;\n      childrenValid = childrenValid && state.$valid;\n      $touched = $touched || state.$touched;\n      $dirty = $dirty || state.$dirty;\n    }\n    const $error = validateIterated(this.validators, value);\n    const $valid = $error == null && childrenValid;\n    return { $error, $valid, $touched, $dirty, ...children } as ControlState<T>;\n  });\n\n  constructor(\n    private readonly controls: Controls<T>,\n    validators: ValidatorFn<T>[] = [],\n  ) {\n    super(validators);\n  }\n\n  private initControls(controls: Controls<T>) {\n    const keys = Object.keys(controls);\n    const controlList = keys.map(key => (<any>this.controls)[key]);\n    const readables = controlList.map(control => control.value) as any as [Readable<any>, ...Readable<any>[]];\n    return derived(readables, (values: any[]) =>\n      values.reduce((acc, value, index) => (acc[keys[index]] = value, acc), {}) as T);\n  }\n\n  private setValue(value: T) {\n    Object.keys(this.controls).forEach(key => {\n      const control = (this.controls as any)[key] as ControlBase;\n      control.value.set((value as any)[key]);\n    });\n  }\n\n  setTouched(touched: boolean) {\n    Object.keys(this.controls).forEach(key => {\n      const control = (this.controls as any)[key] as ControlBase;\n      control.setTouched(touched);\n    });\n  }\n\n  getControl(path: string) {\n    const [_, name, rest] = path.match(objectPath) || [];\n    const control = name && (this.controls as any)[name] as ControlBase || null;\n    if (!control) return null!;\n    return rest ? control.getControl(rest) : control;\n  }\n\n  reset(value?: T) {\n    Object.keys(this.controls).forEach(key => {\n      const control = (this.controls as any)[key] as ControlBase;\n      control.reset((value as any)[key]);\n    });\n  };\n\n}\n\nconst arrayPath = /^\\[(\\d+)\\]\\.?(.*)$/;\n\nexport class ControlArray<T> extends ControlBase<T[]> {\n\n  private controlStore = writable(this._controls);\n\n  private valueDerived = derived(this.controlStore, (controls: ControlBase<T>[], set: (value: T[]) => void) => {\n    const derivedValues = derived(\n      controls.map(control => control.value) as any as [Readable<T>, ...Readable<T>[]],\n      values => values as T[]);\n    return derivedValues.subscribe(set);\n  });\n\n  value: Writable<T[]> = {\n    subscribe: this.valueDerived.subscribe,\n    set: value => this.setValue(value),\n    update: updater => this.setValue(updater(get(this.valueDerived))),\n  };\n\n  state = derived([this.value, this.controlStore], ([value, controls]) => {\n    const children: $ControlState & $ControlState[] = [] as any;\n    let childrenValid = true;\n    for (let i = 0, len = controls.length; i < len; i++) {\n      const state: $ControlState = get(controls[i].state);\n      children[i] = state;\n      childrenValid = childrenValid && state.$valid;\n      children.$touched = children.$touched || state.$touched;\n      children.$dirty = children.$dirty || state.$dirty;\n    }\n    children.$error = validateIterated(this.validators, value);\n    children.$valid = children.$error == null && childrenValid;\n\n    return children as any as ControlState<T[]>;\n  });\n\n  constructor(\n    private readonly _controls: ControlBase<T>[],\n    validators: ValidatorFn<T[]>[] = [],\n  ) {\n    super(validators);\n  }\n\n  private setValue(value: T[]) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach((control, index) => control.value.set(value[index]));\n  }\n\n  setTouched(touched: boolean) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach(control => control.setTouched(touched));\n  }\n\n  get size() {\n    return (get(this.controlStore) as ControlBase<T>[]).length;\n  }\n\n  get controls() {\n    return (get(this.controlStore) as ControlBase<T>[]);\n  }\n\n  pushControl(control: ControlBase<T>) {\n    this.controlStore.update(stores => (stores.push(control), stores));\n  }\n\n  addControlAt(index: number, control: ControlBase<T>) {\n    this.controlStore.update(stores => (stores.splice(index, 0, control), stores));\n  }\n\n  removeControlAt(index: number) {\n    this.controlStore.update(stores => (stores.splice(index, 1), stores));\n  }\n\n  slice(start?: number, end?: number) {\n    this.controlStore.update(stores => stores.slice(start, end));\n  }\n\n  getControl(path: string) {\n    const [_, index, rest] = path.match(arrayPath) || [];\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    const control = index != null && controls[+index] || null;\n    if (!control) return null!;\n    return rest ? control.getControl(rest) : control;\n  }\n\n  reset(value?: T[]) {\n    const controls: ControlBase<T>[] = get(this.controlStore);\n    controls.forEach((control, index) => control.reset(value && value[index]));\n  }\n\n  setValidators(validators: ValidatorFn<T[]>[]) {\n    if (!(Array.isArray(validators) && validators.length)) return;\n    this.validators = validators;\n  }\n\n}\n","import { $ControlState, Control, ControlBase } from \"./control\";\n\nexport const controlClasses = (el: HTMLElement, control: Control) => {\n\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\tconst classList = el.classList;\n\n\tconst stateSub = control.state.subscribe((state) => {\n\t\tif (state.$error) {\n\t\t\tclassList.add('invalid');\n\t\t\tclassList.remove('valid');\n\t\t} else {\n\t\t\tclassList.add('valid');\n\t\t\tclassList.remove('invalid');\n\t\t}\n\n\t\tif (state.$dirty) {\n\t\t\tclassList.add('dirty');\n\t\t\tclassList.remove('pristine');\n\t\t} else {\n\t\t\tclassList.add('pristine');\n\t\t\tclassList.remove('dirty');\n\t\t}\n\n\t\tif (state.$touched) {\n\t\t\tclassList.add('touched');\n\t\t} else {\n\t\t\tclassList.remove('touched');\n\t\t}\n\n\t});\n\n\tconst eventNames = ['blur', 'focusout'];\n\n\tconst unregister = () => eventNames.forEach(eventName => el.removeEventListener(eventName, touchedFn));\n\n\tconst touchedFn = () => {\n\t\tcontrol.setTouched(true);\n\t\tunregister();\n\t}\n\n\teventNames.forEach(eventName => el.addEventListener(eventName, touchedFn));\n\n\treturn {\n\t\tdestroy() {\n\t\t\tunregister();\n\t\t\tstateSub();\n\t\t}\n\t}\n};\n\nexport const controlErrorFactory = ({ onlyTouched = false } = {}) =>\n\t(el: HTMLElement, control: ControlBase) => {\n\t\tif (!(control instanceof Control)) throw new Error('must be used with a Control class');\n\n\t\tconst stateSub = control.state.subscribe(_state => {\n\t\t\tconst state = (_state as $ControlState);\n\t\t\tconst hasError = !!((!onlyTouched || state.$touched) && state.$error);\n\t\t\tel.hidden = !hasError;\n\t\t\tif (hasError) el.innerHTML = state.$error!;\n\t\t});\n\n\t\treturn { destroy: stateSub };\n\t};\n\n\nexport const controlError = controlErrorFactory();\n","export type ValidatorFn<T = any> = (fieldValue: T) => string | null;\n\ntype ValidatorFactory<T = unknown> = (message: string, config?: T) => ValidatorFn;\n\nexport const required: ValidatorFactory = (message, trim = true) => value => {\n\tlet stringValue = value != null ? `${value}` : '';\n\tif (trim) stringValue = stringValue.trim();\n\treturn stringValue !== '' ? null : message;\n};\n\nconst emailFormat = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const email: ValidatorFactory = message => email => {\n\tconst valid = email == null || emailFormat.test(email);\n\treturn valid ? null : message;\n};\n\nexport const minLength: ValidatorFactory<number> = (message, min) => value => {\n\tconst valid = value != null && (min == null || `${value}`.length >= min);\n\treturn valid ? null : message;\n};\n\nexport const maxLength: ValidatorFactory<number> = (message, max) => value => {\n\tconst valid = value != null && (max == null || `${value}`.length <= max);\n\treturn valid ? null : message;\n};\n\nexport const number: ValidatorFactory = message => number => {\n\tconst valid = number == null || !isNaN(number);\n\treturn valid ? null : message;\n};\n\nconst decimalFormat = /^[\\d.]+$/;\nexport const decimal: ValidatorFactory = message => number => {\n\tconst valid = number == null || !isNaN(number) && decimalFormat.test(`${number}`);\n\treturn valid ? null : message;\n};\n\nconst intFormat = /^[\\d]+$/;\nexport const integer: ValidatorFactory = message => number => {\n\tconst valid = number == null || !isNaN(number) && intFormat.test(`${number}`);\n\treturn valid ? null : message;\n};\n\n\n\nexport const min: ValidatorFactory<number> = (message, min) => number => {\n\tconst valid = number == null || !isNaN(number) && (min == null || number >= min);\n\treturn valid ? null : message;\n};\n\nexport const max: ValidatorFactory<number> = (message, max) => number => {\n\tconst valid = number == null || !isNaN(number) && (max == null || number <= max);\n\treturn valid ? null : message;\n};\n\nexport const pattern: ValidatorFactory<RegExp> = (message, re) => text => {\n\tconst valid = text == null || (re == null || re.test(text));\n\treturn valid ? null : message;\n};\n\n"],"names":["validateIterated","validators","fieldValue","Array","isArray","validator","result","e","console","error","ControlBase","[object Object]","this","length","Control","initial","super","writable","derived","value","touched","$touched","$error","$valid","$dirty","set","objectPath","ControlGroup","controls","initControls","subscribe","valueDerived","setValue","update","updater","get","children","childrenValid","key","Object","keys","state","readables","map","control","values","reduce","acc","index","forEach","setTouched","path","_","name","rest","match","getControl","reset","arrayPath","ControlArray","_controls","controlStore","i","len","size","stores","push","splice","start","end","slice","controlClasses","el","Error","classList","stateSub","add","remove","eventNames","unregister","eventName","removeEventListener","touchedFn","addEventListener","controlErrorFactory","onlyTouched","destroy","_state","hasError","hidden","innerHTML","controlError","required","message","trim","stringValue","emailFormat","email","test","minLength","min","maxLength","max","number","isNaN","decimalFormat","decimal","intFormat","integer","pattern","re","text"],"mappings":"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"}